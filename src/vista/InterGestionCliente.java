package vista;

import com.mysql.jdbc.Statement;
import conexion.Conexion;
import controlador.Ctrl_Cliente;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import modelo.Cliente;

/**
 *
 * @author caill
 */
public class InterGestionCliente extends javax.swing.JInternalFrame {

    private int idCliente;
//    int obtenerIdAbogadoCombo = 0;

    public InterGestionCliente() {
        initComponents();
        this.setSize(new Dimension(900, 550));
        this.setTitle("Gestionar Clientes");

        this.CargarTablaClientes();
        this.cargarComboAbogado();

        //insertar imagen en el label
        ImageIcon wallpaper = new ImageIcon("src/img/fondo4.jpg ");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 550, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_cliente = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_rut = new javax.swing.JTextField();
        txt_nota = new javax.swing.JTextField();
        txt_direccion = new javax.swing.JTextField();
        jComboBox_abogado = new javax.swing.JComboBox<>();
        txt_contacto = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jTextField_busqueda_criterio = new javax.swing.JTextField();
        jButton_buscar_criterio = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setClosable(true);
        setIconifiable(getAutoscrolls());
        setAutoscrolls(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Administrar Clientes");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_cliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_cliente);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 730, 270));

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setForeground(new java.awt.Color(255, 255, 255));
        jButton_actualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/actualizar.png"))); // NOI18N
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 120, 120, 270));

        jPanel3.setBackground(new java.awt.Color(0, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 70, -1));

        txt_nombre.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 170, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Rut:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 60, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Contacto:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 80, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Direcci√≥n:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 90, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Nota:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 60, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Abogado:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 50, 80, -1));

        txt_rut.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_rut, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 170, -1));

        txt_nota.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_nota, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 20, 180, -1));

        txt_direccion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_direccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 50, 170, -1));

        jComboBox_abogado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_abogado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Abogado:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_abogado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_abogadoActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBox_abogado, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, 180, -1));

        txt_contacto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_contacto, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 170, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Nombre:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 70, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Nombre:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 70, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 860, 100));

        jPanel4.setBackground(new java.awt.Color(0, 51, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Nombre/Rut:");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        jTextField_busqueda_criterio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField_busqueda_criterioMouseClicked(evt);
            }
        });
        jTextField_busqueda_criterio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_busqueda_criterioKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_busqueda_criterioKeyReleased(evt);
            }
        });
        jPanel4.add(jTextField_busqueda_criterio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 12, 570, 35));

        jButton_buscar_criterio.setBackground(new java.awt.Color(0, 51, 51));
        jButton_buscar_criterio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/lupa.png"))); // NOI18N
        jButton_buscar_criterio.setBorder(null);
        jButton_buscar_criterio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscar_criterioActionPerformed(evt);
            }
        });
        jButton_buscar_criterio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_buscar_criterioKeyPressed(evt);
            }
        });
        jPanel4.add(jButton_buscar_criterio, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 13, 110, 35));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 860, 61));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed

        Cliente cliente = new Cliente(); // Modelo cliente
        Ctrl_Cliente controlCliente = new Ctrl_Cliente();

        // Obtener el nombre del abogado seleccionado
        String nombre = jComboBox_abogado.getSelectedItem().toString().trim();

        // Validar campos
        if (txt_nombre.getText().isEmpty() || txt_rut.getText().isEmpty()
                || txt_contacto.getText().isEmpty() || txt_direccion.getText().isEmpty()
                || txt_nota.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
            return; // Salir si faltan campos
        }

        // Validar selecci√≥n de abogado
        if (nombre.equalsIgnoreCase("Seleccione Abogado:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un abogado v√°lido");
            return; // Salir si no hay abogado seleccionado
        }

        try {
            // Setear los datos del cliente
            cliente.setNombre(txt_nombre.getText().trim());
            cliente.setRut(txt_rut.getText().trim());
            cliente.setContacto(txt_contacto.getText().trim());
            cliente.setDireccion(txt_direccion.getText().trim());
            cliente.setNota(txt_nota.getText().trim());

            // Obtener el ID del abogado seleccionado a partir del ComboBox
            int idAbogado = obtenerIdAbogadoCombo(nombre);

            if (idAbogado == -1) {
                JOptionPane.showMessageDialog(null, "Abogado no encontrado");
                return;
            }

            // Setear el ID del abogado en el cliente
            cliente.setIdAbogado(idAbogado);

            // Intentar actualizar los datos
            if (controlCliente.actualizar(cliente, idCliente, idAbogado)) {
                JOptionPane.showMessageDialog(null, "Registro actualizado con √©xito");

                // Actualizar tabla y combo box
                cargarComboAbogado();  // Aseg√∫rate de que este m√©todo sea el correcto
                CargarTablaClientes(); // Actualiza la tabla despu√©s de la actualizaci√≥n

                // Limpiar campos
                limpiar(); // Limpiar los campos del formulario
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            System.out.println("Error en jButton_actualizarActionPerformed (General): " + e);
        }


    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        Ctrl_Cliente controlCliente = new Ctrl_Cliente();

        if (idCliente == 0) {
            JOptionPane.showMessageDialog(null, "¬°Seleccione un Cliente!");
            return; // Salir si no se ha seleccionado un cliente
        }

// Mostrar advertencia de confirmaci√≥n
        int confirmacion = JOptionPane.showConfirmDialog(
                null,
                "¬øEst√° seguro de que desea eliminar al cliente?",
                "Confirmaci√≥n de Eliminaci√≥n",
                JOptionPane.YES_NO_OPTION
        );

// Verificar la respuesta del usuario
        if (confirmacion == JOptionPane.YES_OPTION) {
            if (controlCliente.eliminar(idCliente)) {
                JOptionPane.showMessageDialog(null, "¬°Cliente eliminado con √©xito!");
                this.CargarTablaClientes(); // Actualizar tabla
                this.cargarComboAbogado(); // Actualizar combo box
                this.limpiar(); // Limpiar campos
            } else {
                JOptionPane.showMessageDialog(null, "¬°Error al eliminar el cliente!");
            }
        }

    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void jComboBox_abogadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_abogadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_abogadoActionPerformed

    private void jButton_buscar_criterioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscar_criterioActionPerformed

        String criterioBusqueda = jTextField_busqueda_criterio.getText().trim();

        if (criterioBusqueda.isEmpty()) {
            // Si el campo est√° vac√≠o, recargamos todos los clientes
            CargarTablaClientes(); // Recargar todos los datos si no se ingresa un criterio
        } else {
            Ctrl_Cliente clienteController = new Ctrl_Cliente();

            // Cambiar la b√∫squeda por nombre y RUT
            ArrayList<Cliente> listaCliente;
            if (criterioBusqueda.contains("-")) { // Asumimos que el RUT tiene formato con gui√≥n
                listaCliente = clienteController.BuscarClienteNombreRut("", criterioBusqueda); // Solo por RUT
            } else {
                listaCliente = clienteController.BuscarClienteNombreRut(criterioBusqueda, ""); // Solo por nombre
            }

            if (listaCliente.isEmpty()) {
                // Si no hay resultados, no mostrar el mensaje, solo limpiar la tabla
                DefaultTableModel model = new DefaultTableModel();
                InterGestionCliente.jTable_cliente = new JTable(model);
                InterGestionCliente.jScrollPane1.setViewportView(InterGestionCliente.jTable_cliente);

                // Definir las columnas de la tabla (vac√≠a por ahora)
                model.addColumn("N¬∞");
                model.addColumn("Nombre");
                model.addColumn("Rut");
                model.addColumn("Contacto");
                model.addColumn("Direcci√≥n");
                model.addColumn("Nota");
                model.addColumn("Abogado");
            } else {
                // Configurar la tabla con los resultados de b√∫squeda
                DefaultTableModel model = new DefaultTableModel();
                InterGestionCliente.jTable_cliente = new JTable(model);
                InterGestionCliente.jScrollPane1.setViewportView(InterGestionCliente.jTable_cliente);

                // Definir las columnas de la tabla
                model.addColumn("N¬∞");
                model.addColumn("Nombre");
                model.addColumn("Rut");
                model.addColumn("Contacto");
                model.addColumn("Direcci√≥n");
                model.addColumn("Nota");
                model.addColumn("Abogado");

                // Llenar las filas de la tabla con los resultados
                for (Cliente cliente : listaCliente) {
                    model.addRow(new Object[]{
                        cliente.getIdCliente(),
                        cliente.getNombre(),
                        cliente.getRut(),
                        cliente.getContacto(),
                        cliente.getDireccion(),
                        cliente.getNota(),
                        cliente.getIdAbogado()
                    });
                }

                // Agregar evento de selecci√≥n en la tabla
                InterGestionCliente.jTable_cliente.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        int filaSeleccionada = InterGestionCliente.jTable_cliente.rowAtPoint(e.getPoint());

                        if (filaSeleccionada >= 0) {
                            int idClienteSeleccionado = (int) model.getValueAt(filaSeleccionada, 0);
                            EnviarDatosClienteSeleccionado(idClienteSeleccionado); // Llamar al m√©todo para manejar el cliente seleccionado
                        }
                    }
                });
            }

            // Limpiar campo de b√∫squeda despu√©s de la b√∫squeda
            jTextField_busqueda_criterio.setText("");
        }

// Agregar el KeyListener para el campo de b√∫squeda
        jTextField_busqueda_criterio.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                // Verificar si la tecla presionada es Enter
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    String criterioBusqueda = jTextField_busqueda_criterio.getText().trim();

                    if (criterioBusqueda.isEmpty()) {
                        // Si el campo est√° vac√≠o, recargamos todos los clientes
                        CargarTablaClientes(); // Recargar todos los datos si no se ingresa un criterio
                    } else {
                        Ctrl_Cliente clienteController = new Ctrl_Cliente();

                        // Cambiar la b√∫squeda por nombre y RUT
                        ArrayList<Cliente> listaCliente;
                        if (criterioBusqueda.contains("-")) { // Asumimos que el RUT tiene formato con gui√≥n
                            listaCliente = clienteController.BuscarClienteNombreRut("", criterioBusqueda); // Solo por RUT
                        } else {
                            listaCliente = clienteController.BuscarClienteNombreRut(criterioBusqueda, ""); // Solo por nombre
                        }

                        if (listaCliente.isEmpty()) {
                            // Si no hay resultados, no mostrar el mensaje, solo limpiar la tabla
                            DefaultTableModel model = new DefaultTableModel();
                            InterGestionCliente.jTable_cliente = new JTable(model);
                            InterGestionCliente.jScrollPane1.setViewportView(InterGestionCliente.jTable_cliente);

                            // Definir las columnas de la tabla (vac√≠a por ahora)
                            model.addColumn("N¬∞");
                            model.addColumn("Nombre");
                            model.addColumn("Rut");
                            model.addColumn("Contacto");
                            model.addColumn("Direcci√≥n");
                            model.addColumn("Nota");
                            model.addColumn("Abogado");
                        } else {
                            // Configurar la tabla con los resultados de b√∫squeda
                            DefaultTableModel model = new DefaultTableModel();
                            InterGestionCliente.jTable_cliente = new JTable(model);
                            InterGestionCliente.jScrollPane1.setViewportView(InterGestionCliente.jTable_cliente);

                            // Definir las columnas de la tabla
                            model.addColumn("N¬∞");
                            model.addColumn("Nombre");
                            model.addColumn("Rut");
                            model.addColumn("Contacto");
                            model.addColumn("Direcci√≥n");
                            model.addColumn("Nota");
                            model.addColumn("Abogado");

                            // Llenar las filas de la tabla con los resultados
                            for (Cliente cliente : listaCliente) {
                                model.addRow(new Object[]{
                                    cliente.getIdCliente(),
                                    cliente.getNombre(),
                                    cliente.getRut(),
                                    cliente.getContacto(),
                                    cliente.getDireccion(),
                                    cliente.getNota(),
                                    cliente.getIdAbogado()
                                });
                            }

                            // Agregar evento de selecci√≥n en la tabla
                            InterGestionCliente.jTable_cliente.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    int filaSeleccionada = InterGestionCliente.jTable_cliente.rowAtPoint(e.getPoint());

                                    if (filaSeleccionada >= 0) {
                                        int idClienteSeleccionado = (int) model.getValueAt(filaSeleccionada, 0);
                                        EnviarDatosClienteSeleccionado(idClienteSeleccionado); // Llamar al m√©todo para manejar el cliente seleccionado
                                    }
                                }
                            });
                        }
                    }
                }
            }
        });


    }//GEN-LAST:event_jButton_buscar_criterioActionPerformed

    private void jTextField_busqueda_criterioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_busqueda_criterioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_busqueda_criterioMouseClicked

    private void jTextField_busqueda_criterioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_busqueda_criterioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButton_buscar_criterio.requestFocus();
        }
    }//GEN-LAST:event_jTextField_busqueda_criterioKeyPressed

    private void jButton_buscar_criterioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_buscar_criterioKeyPressed

    }//GEN-LAST:event_jButton_buscar_criterioKeyPressed

    private void jTextField_busqueda_criterioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_busqueda_criterioKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_busqueda_criterioKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_buscar_criterio;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JComboBox<String> jComboBox_abogado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_cliente;
    private javax.swing.JTextField jTextField_busqueda_criterio;
    private javax.swing.JTextField txt_contacto;
    private javax.swing.JTextField txt_direccion;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_nota;
    private javax.swing.JTextField txt_rut;
    // End of variables declaration//GEN-END:variables

    private void cargarComboAbogado() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_abogados";
        Statement st;

        try {
            st = (Statement) cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_abogado.removeAllItems();
            jComboBox_abogado.addItem("Seleccione Abogado: ");

            while (rs.next()) {
                jComboBox_abogado.addItem(rs.getString("nombre"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cargar nombre abogado");
        }
    }

    private void CargarTablaClientes() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();

        // Consulta SQL con LEFT JOIN entre las tablas tb_clientes y tb_abogados
        String sql = "SELECT c.id_cliente, c.nombre AS cliente_nombre, c.rut, c.contacto, c.direccion, c.notas, "
                + "COALESCE(a.nombre, 'Sin Abogado') AS abogado_nombre "
                + "FROM tb_clientes c "
                + "LEFT JOIN tb_abogados a ON c.idAbogado = a.id_abogado";

        try (Statement st = (Statement) con.createStatement(); ResultSet rs = st.executeQuery(sql)) {
            // Configurar las columnas de la tabla
            model.addColumn("ID");
            model.addColumn("Nombre");
            model.addColumn("RUT");
            model.addColumn("Contacto");
            model.addColumn("Direcci√≥n");
            model.addColumn("Notas");
            model.addColumn("Abogado");

            // Llenar el modelo con los datos de la consulta
            while (rs.next()) {
                Object fila[] = {
                    rs.getInt("id_cliente"),
                    rs.getString("cliente_nombre"),
                    rs.getString("rut"),
                    rs.getString("contacto"),
                    rs.getString("direccion"),
                    rs.getString("notas"),
                    rs.getString("abogado_nombre") // Nombre del abogado asociado al cliente
                };
                model.addRow(fila);
            }

            // Configurar la tabla
            InterGestionCliente.jTable_cliente.setModel(model);
            InterGestionCliente.jScrollPane1.setViewportView(InterGestionCliente.jTable_cliente);

        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla registro de los clientes: " + e.getMessage());

        }

        // Configurar el evento de clic en la tabla
        InterGestionCliente.jTable_cliente.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int filaPoint = InterGestionCliente.jTable_cliente.rowAtPoint(e.getPoint());
                int columnaPoint = 0; // Columna de ID

                if (filaPoint > -1) {
                    idCliente = (int) InterGestionCliente.jTable_cliente.getValueAt(filaPoint, columnaPoint);
                    EnviarDatosClienteSeleccionado(idCliente);
                }
            }
        });
    }

    private void EnviarDatosClienteSeleccionado(int idCliente) {
        if (idCliente <= 0) {
            System.out.println("El ID del cliente no es v√°lido");
            return;
        }

        String sql = "SELECT nombre, rut, contacto, direccion, notas, idAbogado FROM tb_clientes WHERE id_cliente = ?";

        try (Connection con = Conexion.conectar(); PreparedStatement pst = con.prepareStatement(sql)) {

            // Asignar el par√°metro de la consulta
            pst.setInt(1, idCliente);

            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    // Asignar valores a los campos
                    txt_nombre.setText(rs.getString("nombre"));
                    txt_rut.setText(rs.getString("rut"));
                    txt_contacto.setText(rs.getString("contacto"));
                    txt_direccion.setText(rs.getString("direccion"));
                    txt_nota.setText(rs.getString("notas"));

                    // Obtener y asignar el nombre del abogado al ComboBox
                    int idAbogado = rs.getInt("idAbogado");
                    String nombreAbogado = relacionarAbogado(idAbogado);
                    jComboBox_abogado.setSelectedItem(nombreAbogado);
                } else {
                    System.out.println("No se encontraron datos para el cliente con ID: " + idCliente);
                }
            }

        } catch (SQLException e) {
            System.out.println("Error al seleccionar Cliente: " + e.getMessage());

        }
    }

    private String relacionarAbogado(int idAbogado) {
        String nombreAbogado = ""; // Inicializar la variable localmente
        String sql = "SELECT nombre FROM tb_abogados WHERE id_abogado = ?";

        try (Connection cn = Conexion.conectar(); PreparedStatement pst = cn.prepareStatement(sql)) {

            // Asignar el valor del par√°metro
            pst.setInt(1, idAbogado);

            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    nombreAbogado = rs.getString("nombre");
                }
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener el nombre del abogado: " + e);
        }

        return nombreAbogado; // Devuelve el nombre del abogado, vac√≠o si no se encuentra
    }

    private int obtenerIdAbogadoCombo(String nombreAbogado) {
        int idAbogado = -1;  // Valor por defecto para indicar que no se encontr√≥

        String sql = "SELECT id_abogado FROM tb_abogados WHERE nombre = ?";

        try (Connection cn = Conexion.conectar(); PreparedStatement pst = cn.prepareStatement(sql)) {
            pst.setString(1, nombreAbogado); // Usar el nombre del abogado
            ResultSet rs = pst.executeQuery(); // Ejecutar la consulta

            if (rs.next()) {
                idAbogado = rs.getInt("id_abogado");  // Obtener el ID del abogado
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener ID del abogado: " + e);
        }

        return idAbogado;
    }

    //METODO PARA LIMPIAR
    private void limpiar() {
        txt_nombre.setText("");
        txt_rut.setText("");
        txt_contacto.setText("");
        txt_direccion.setText("");
        txt_nota.setText("");
    }

}
