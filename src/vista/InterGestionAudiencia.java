package vista;

import com.mysql.jdbc.Statement;
import conexion.Conexion;
import controlador.Ctrl_Audiencia;

import java.awt.Dimension;
import java.awt.HeadlessException;

import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import modelo.Audiencia;


/**
 *
 * @author caill
 */
public class InterGestionAudiencia extends javax.swing.JInternalFrame {

    private int idAudiencia;

    public InterGestionAudiencia() {
        initComponents();
        this.setSize(new Dimension(900, 570));
        this.setTitle("Gestionar Audiencia");

        this.CargarTablaAudiencia();
        this.cargarComboAbogado();

        //insertar imagen en el label
        ImageIcon wallpaper = new ImageIcon("src/img/fondo4.jpg ");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 570, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_registro_audiencia = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txt_tipo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_lugar = new javax.swing.JTextField();
        txt_observacion = new javax.swing.JTextField();
        jComboBox_abogado = new javax.swing.JComboBox<>();
        txt_tribunal = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_estado = new javax.swing.JTextField();
        jDateChooser_fecha = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jComboBox_minutos = new javax.swing.JComboBox<>();
        jComboBox_hora = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_rol = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jTextField_busqueda_criterio = new javax.swing.JTextField();
        jButton_buscar_criterio = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setClosable(true);
        setIconifiable(getAutoscrolls());
        setAutoscrolls(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Administrar Audiencias");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_registro_audiencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_registro_audiencia);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 730, 270));

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setForeground(new java.awt.Color(255, 255, 255));
        jButton_actualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/actualizar.png"))); // NOI18N
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eliminar.png"))); // NOI18N
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 120, 120, 270));

        jPanel3.setBackground(new java.awt.Color(0, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_tipo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_tipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 170, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Lugar:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 60, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Tribunal:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 80, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(":");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, 20, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Obs:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 50, 60, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Abogado:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, 80, -1));

        txt_lugar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_lugar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 170, -1));

        txt_observacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_observacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, 180, -1));

        jComboBox_abogado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_abogado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Abogado:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_abogado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_abogadoActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBox_abogado, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 80, 180, -1));

        txt_tribunal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_tribunal, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 170, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Tipo:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 70, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Estado:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 60, -1));

        txt_estado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_estado, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 20, 180, -1));
        jPanel3.add(jDateChooser_fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 50, 170, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Fecha:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 90, -1));

        jComboBox_minutos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Min:", "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        jPanel3.add(jComboBox_minutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 80, 70, -1));

        jComboBox_hora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hora:", "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));
        jPanel3.add(jComboBox_hora, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 70, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Hora:");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 90, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Rol:");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 60, -1));

        txt_rol.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_rol, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 170, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 860, 120));

        jPanel4.setBackground(new java.awt.Color(0, 51, 51));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Lugar:");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 17, 50, 20));

        jTextField_busqueda_criterio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField_busqueda_criterioMouseClicked(evt);
            }
        });
        jTextField_busqueda_criterio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_busqueda_criterioKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_busqueda_criterioKeyReleased(evt);
            }
        });
        jPanel4.add(jTextField_busqueda_criterio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 12, 570, 35));

        jButton_buscar_criterio.setBackground(new java.awt.Color(0, 51, 51));
        jButton_buscar_criterio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/lupa.png"))); // NOI18N
        jButton_buscar_criterio.setBorder(null);
        jButton_buscar_criterio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscar_criterioActionPerformed(evt);
            }
        });
        jButton_buscar_criterio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton_buscar_criterioKeyPressed(evt);
            }
        });
        jPanel4.add(jButton_buscar_criterio, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 13, 110, 35));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 860, 61));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed

        Audiencia audiencias = new Audiencia(); // Modelo causas
        Ctrl_Audiencia controlAudiencia = new Ctrl_Audiencia();

        // Obtener el nombre del abogado seleccionado
        String nombre = jComboBox_abogado.getSelectedItem().toString().trim();

        if (txt_tipo.getText().trim().isEmpty()
                || txt_rol.getText().trim().isEmpty()
                || txt_tribunal.getText().trim().isEmpty()
                || jDateChooser_fecha.getDate() == null
                || txt_lugar.getText().trim().isEmpty()
                || jComboBox_hora.getSelectedItem() == null
                || jComboBox_minutos.getSelectedItem() == null
                || jComboBox_hora.getSelectedItem().toString().trim().isEmpty() // Verificar si la hora no está vacía
                || jComboBox_minutos.getSelectedItem().toString().trim().isEmpty() // Verificar si los minutos no están vacíos
                || txt_estado.getText().trim().isEmpty()) {  // Verificar si el estado no está vacío
            JOptionPane.showMessageDialog(null, "Complete todos los campos correctamente");
            return;
        }

        // Validar selección de abogado
        if (nombre.equalsIgnoreCase("Seleccione Abogado:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un abogado válido");
            return; // Salir si no hay abogado seleccionado
        }

        try {
            // Setear los datos del cliente
            audiencias.setTipo(txt_tipo.getText().trim());
            audiencias.setRol(txt_rol.getText().trim());
            audiencias.setTribunal(txt_tribunal.getText().trim());

            // Verificar que la fecha no sea nula
            if (jDateChooser_fecha.getDate() != null) {
                // Formatear la fecha a un formato adecuado para SQL (yyyy-MM-dd)
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String fechaFormateada = sdf.format(jDateChooser_fecha.getDate());
                audiencias.setFecha(fechaFormateada); // Establecer la fecha formateada
            } else {
                // Si no se ha seleccionado fecha, puedes asignar un valor predeterminado o manejar el error
                JOptionPane.showMessageDialog(null, "Por favor, seleccione una fecha válida");
                return; // Salir si no se seleccionó fecha
            }

            // Concatenar la hora y los minutos
            String hora = jComboBox_hora.getSelectedItem().toString().trim();
            String minutos = jComboBox_minutos.getSelectedItem().toString().trim();
            String horaCompleta = hora + ":" + minutos;  // Concatenar hora y minutos

            audiencias.setHora(horaCompleta);  // Establecer la hora concatenada

            audiencias.setLugar(txt_lugar.getText().trim());
            audiencias.setEstado(txt_estado.getText().trim());
            audiencias.setObservaciones(txt_observacion.getText().trim());

            // Obtener el ID del abogado seleccionado a partir del ComboBox
            int idAbogado = obtenerIdAbogadoCombo(nombre);
            if (idAbogado == -1) {
                System.out.println("Abogado no encontrado para el nombre: " + nombre);
                JOptionPane.showMessageDialog(null, "Abogado no encontrado. Verifique la selección.");
                return;
            }

            // Setear el ID del abogado en el cliente
            audiencias.setIdAbogado(idAbogado);

            if (controlAudiencia.actualizar(audiencias, idAudiencia, idAbogado)) {
                JOptionPane.showMessageDialog(null, "Registro actualizado con éxito");

                // Actualizar tabla y combo box
                cargarComboAbogado();  // Asegúrate de que este método sea el correcto
                CargarTablaAudiencia(); // Actualiza la tabla después de la actualización

                // Limpiar campos
                limpiar(); // Limpiar los campos del formulario
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar el registro");
            }

        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            System.out.println("Error en jButton_actualizarActionPerformed (General): " + e);
        }

    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        // Instanciar el controlador de audiencia
        Ctrl_Audiencia controlAudiencia = new Ctrl_Audiencia();

        // Validar que se haya seleccionado una audiencia
        if (idAudiencia == 0) {
            JOptionPane.showMessageDialog(null, "¡Seleccione una Audiencia!");
            return; // Salir si no se ha seleccionado una audiencia
        }

        // Mostrar advertencia de confirmación antes de eliminar
        int confirmacion = JOptionPane.showConfirmDialog(
                null,
                "¿Está seguro de que desea eliminar esta audiencia?",
                "Confirmación de Eliminación",
                JOptionPane.YES_NO_OPTION
        );

        // Verificar la respuesta del usuario
        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Intentar eliminar la audiencia
                if (controlAudiencia.eliminar(idAudiencia)) {
                    JOptionPane.showMessageDialog(null, "¡Audiencia eliminada con éxito!");

                    // Actualizar tabla y combo box después de la eliminación
                    this.CargarTablaAudiencia(); // Actualiza la tabla de audiencias
                    this.cargarComboAbogado(); // Actualiza el combo box de abogados
                    this.limpiar(); // Limpiar los campos del formulario
                } else {
                    JOptionPane.showMessageDialog(null, "¡Error al eliminar la audiencia!");
                }
            } catch (HeadlessException e) {
                // Capturar y mostrar cualquier excepción durante la eliminación
                JOptionPane.showMessageDialog(null, "Ocurrió un error: " + e.getMessage());
                System.out.println("Error al eliminar audiencia: " + e.getMessage());
            }
        }

    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void jComboBox_abogadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_abogadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_abogadoActionPerformed

    private void jButton_buscar_criterioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscar_criterioActionPerformed

        String criterioBusqueda = jTextField_busqueda_criterio.getText().trim();

        if (criterioBusqueda.isEmpty()) {
            // Si el campo está vacío, recargamos todos los datos
            CargarTablaAudiencia(); // Recargar todos los datos si no se ingresa un criterio
        } else {
            Ctrl_Audiencia audienciaController = new Ctrl_Audiencia();

            // Obtener la lista de audiencias según el criterio de búsqueda
            ArrayList<Audiencia> listaAudiencias = audienciaController.BuscarCausaRol(criterioBusqueda);

            // Configurar la tabla para mostrar los resultados
            DefaultTableModel model = new DefaultTableModel();
            InterGestionAudiencia.jTable_registro_audiencia.setModel(model);
            InterGestionAudiencia.jScrollPane1.setViewportView(InterGestionAudiencia.jTable_registro_audiencia);

            // Definir las columnas de la tabla
            model.addColumn("N° Audiencia");
            model.addColumn("Tipo");
            model.addColumn("Rol");
            model.addColumn("Tribunal");
            model.addColumn("Fecha Causa");
            model.addColumn("Fecha Audiencia");
            model.addColumn("Hora");
            model.addColumn("Lugar");
            model.addColumn("Estado");
            model.addColumn("Observaciónes");
            model.addColumn("Abogado");

            if (listaAudiencias.isEmpty()) {
                // Si no se encuentran resultados, mostrar mensaje o dejar la tabla vacía
                System.out.println("No se encontraron audiencias para el criterio de búsqueda.");
            } else {
                // Llenar las filas de la tabla con los resultados
                for (Audiencia audiencia : listaAudiencias) {
                    model.addRow(new Object[]{
                        audiencia.getIdAudiencia(),
                        audiencia.getTipo(),
                        audiencia.getRol(),
                        audiencia.getTribunal(),
                        audiencia.getFecha(),
                        audiencia.getHora(),
                        audiencia.getLugar(),
                        audiencia.getEstado(),
                        audiencia.getObservaciones(),
                        audiencia.getIdAbogado()
                    });
                }

                // Agregar evento de selección en la tabla
                InterGestionAudiencia.jTable_registro_audiencia.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        int filaSeleccionada = InterGestionAudiencia.jTable_registro_audiencia.rowAtPoint(e.getPoint());

                        if (filaSeleccionada >= 0) {
                            int idAudienciaSeleccionada = (int) model.getValueAt(filaSeleccionada, 0);
                            try {
                                EnviarDatosAudienciaSeleccionada(idAudienciaSeleccionada); // Llamar al método para manejar la audiencia seleccionada
                            } catch (SQLException ex) {
                                Logger.getLogger(InterGestionAudiencia.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                });
            }
        }

        // Limpiar campo de búsqueda después de la búsqueda
        jTextField_busqueda_criterio.setText("");


    }//GEN-LAST:event_jButton_buscar_criterioActionPerformed

    private void jTextField_busqueda_criterioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_busqueda_criterioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_busqueda_criterioMouseClicked

    private void jTextField_busqueda_criterioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_busqueda_criterioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButton_buscar_criterio.requestFocus();
        }
    }//GEN-LAST:event_jTextField_busqueda_criterioKeyPressed

    private void jButton_buscar_criterioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton_buscar_criterioKeyPressed

    }//GEN-LAST:event_jButton_buscar_criterioKeyPressed

    private void jTextField_busqueda_criterioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_busqueda_criterioKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_busqueda_criterioKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_buscar_criterio;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JComboBox<String> jComboBox_abogado;
    private javax.swing.JComboBox<String> jComboBox_hora;
    private javax.swing.JComboBox<String> jComboBox_minutos;
    private com.toedter.calendar.JDateChooser jDateChooser_fecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_registro_audiencia;
    private javax.swing.JTextField jTextField_busqueda_criterio;
    private javax.swing.JTextField txt_estado;
    private javax.swing.JTextField txt_lugar;
    private javax.swing.JTextField txt_observacion;
    private javax.swing.JTextField txt_rol;
    private javax.swing.JTextField txt_tipo;
    private javax.swing.JTextField txt_tribunal;
    // End of variables declaration//GEN-END:variables

    private void cargarComboAbogado() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_abogados";
        Statement st;

        try {
            st = (Statement) cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_abogado.removeAllItems();
            jComboBox_abogado.addItem("Seleccione Abogado: ");

            while (rs.next()) {
                jComboBox_abogado.addItem(rs.getString("nombre"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cargar nombre abogado");
        }
    }

    private void CargarTablaAudiencia() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();

        // Consulta SQL ajustada para la estructura de la tabla tb_audiencias
        String sql = "SELECT a.id_audiencia, a.tipo, a.rol, a.tribunal, a.fecha, a.hora, a.lugar, a.estado, a.observaciones, "
                + "COALESCE(ab.nombre, 'Sin Abogado') AS abogado_nombre "
                + "FROM tb_audiencias a "
                + "LEFT JOIN tb_abogados ab ON a.id_abogado = ab.id_abogado";

        try (java.sql.Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {
            // Limpiar el modelo antes de agregar columnas y filas
            model.setRowCount(0);
            model.setColumnCount(0);

            // Configurar las columnas de la tabla
            model.addColumn("ID Audiencia");
            model.addColumn("Tipo");
            model.addColumn("Rol");
            model.addColumn("Tribunal");
            model.addColumn("Fecha");
            model.addColumn("Hora");
            model.addColumn("Lugar");
            model.addColumn("Estado");
            model.addColumn("Observaciones");
            model.addColumn("Abogado");

            // Verificar si hay datos en el ResultSet antes de llenar el modelo
            boolean hasData = false;
            while (rs.next()) {
                hasData = true;

                // Recuperar la hora de la audiencia y separar horas y minutos
                String hora = rs.getString("hora");
                String horaCompleta = hora; // En caso que ya esté en formato completo HH:mm

                // Si la hora y minutos están separados en columnas diferentes (esto es un ejemplo)
                if (hora != null && hora.contains(":")) {
                    // La hora ya está en el formato esperado (ejemplo: "10:30"), no es necesario concatenar
                    horaCompleta = hora;
                }

                // Crear la fila con la hora ya concatenada
                Object fila[] = {
                    rs.getInt("id_audiencia"), // ID de la audiencia
                    rs.getString("tipo"), // Tipo de audiencia
                    rs.getString("rol"), // Rol
                    rs.getString("tribunal"), // Tribunal
                    rs.getDate("fecha"), // Fecha de la audiencia
                    horaCompleta, // Hora de la audiencia (concatenada si es necesario)
                    rs.getString("lugar"), // Lugar de la audiencia
                    rs.getString("estado"), // Estado
                    rs.getString("observaciones"), // Observación
                    rs.getString("abogado_nombre") // Nombre del abogado
                };
                model.addRow(fila);  // Agregar la fila al modelo
            }

            if (!hasData) {
                JOptionPane.showMessageDialog(null, "No se encontraron audiencias para mostrar.");
            }

            // Configurar la tabla con el modelo actualizado
            InterGestionAudiencia.jTable_registro_audiencia.setModel(model);
            InterGestionAudiencia.jScrollPane1.setViewportView(InterGestionAudiencia.jTable_registro_audiencia);

        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla de audiencias: " + e.getMessage());
        }

        // Configurar la selección de fila
        InterGestionAudiencia.jTable_registro_audiencia.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Configurar el evento de clic en la tabla
        InterGestionAudiencia.jTable_registro_audiencia.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Obtener la fila donde se hizo clic
                int filaPoint = InterGestionAudiencia.jTable_registro_audiencia.rowAtPoint(e.getPoint());

                // Verificar que la fila seleccionada es válida (no negativa)
                if (filaPoint >= 0) {
                    // Seleccionar la fila al hacer clic
                    InterGestionAudiencia.jTable_registro_audiencia.setRowSelectionInterval(filaPoint, filaPoint);  // Esto asegura que la fila se selecciona visualmente

                    // Obtener el ID de la audiencia desde la tabla
                    int columnaPoint = 0; // Columna del ID de la audiencia (ahora está en la columna 0)
                    idAudiencia = (int) InterGestionAudiencia.jTable_registro_audiencia.getValueAt(filaPoint, columnaPoint);

                    try {
                        // Llamar al método para enviar los datos de la audiencia seleccionada
                        EnviarDatosAudienciaSeleccionada(idAudiencia);
                    } catch (SQLException ex) {
                        Logger.getLogger(InterGestionAudiencia.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }

    private void EnviarDatosAudienciaSeleccionada(int idAudiencia) throws SQLException {
        if (idAudiencia <= 0) {
            System.out.println("El ID de la audiencia no es válido");
            return;
        }

        // SQL ajustado para la estructura de la tabla tb_audiencias
        String sql = "SELECT a.tipo, a.rol, a.tribunal, a.fecha, a.hora, a.lugar, a.estado, a.observaciones, "
                + "a.id_abogado, ab.nombre AS abogado_nombre "
                + "FROM tb_audiencias a "
                + "LEFT JOIN tb_abogados ab ON a.id_abogado = ab.id_abogado "
                + "WHERE a.id_audiencia = ?";

        try (Connection con = Conexion.conectar(); PreparedStatement pst = con.prepareStatement(sql)) {
            // Asignar el parámetro de la consulta
            pst.setInt(1, idAudiencia);

            System.out.println("Ejecutando consulta con idAudiencia: " + idAudiencia);

            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    // Asignar valores a los campos de la audiencia
                    txt_tipo.setText(rs.getString("tipo"));  // Asignar tipo
                    txt_rol.setText(rs.getString("rol"));
                    txt_tribunal.setText(rs.getString("tribunal"));

                    // Obtener y formatear la fecha de la audiencia
                    Date fechaAudiencia = rs.getDate("fecha");
                    if (fechaAudiencia != null) {
                        jDateChooser_fecha.setDate(fechaAudiencia); // JDateChooser para la fecha de la audiencia
                    } else {
                        jDateChooser_fecha.setDate(null);
                    }

                    // Obtener la hora y los minutos y concatenarlos
                    String horaCompleta = rs.getString("hora");
                    if (horaCompleta != null && !horaCompleta.isEmpty()) {
                        // Suponiendo que la hora está en formato "HH:mm", separamos la hora y los minutos
                        String[] horaParts = horaCompleta.split(":");
                        if (horaParts.length == 2) {
                            String hora = horaParts[0];  // Parte antes de ":"
                            String minutos = horaParts[1];  // Parte después de ":"
                            // Asignamos las partes al comboBox
                            jComboBox_hora.setSelectedItem(hora);
                            jComboBox_minutos.setSelectedItem(minutos);
                        } else {
                            System.out.println("Error: El formato de hora no es válido.");
                        }
                    }

                    // Asignar el campo lugar a la UI
                    String lugar = rs.getString("lugar");
                    if (lugar != null && !lugar.isEmpty()) {
                        txt_lugar.setText(lugar);
                    }

                    // Asignar estado
                    txt_estado.setText(rs.getString("estado"));  // Asignar estado

                    // Asignar observaciones
                    txt_observacion.setText(rs.getString("observaciones"));

                    // Obtener y asignar el nombre del abogado al ComboBox
                    int idAbogado = rs.getInt("id_abogado");
                    System.out.println("ID Abogado: " + idAbogado);
                    String nombreAbogado = rs.getString("abogado_nombre");
                    System.out.println("Nombre Abogado: " + nombreAbogado);
                    jComboBox_abogado.setSelectedItem(nombreAbogado);

                } else {
                    System.out.println("No se encontraron datos para la audiencia con ID: " + idAudiencia);
                }
            } catch (SQLException e) {
                System.out.println("Error al seleccionar una audiencia: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "Error al obtener los datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            System.out.println("Error de conexión o consulta: " + e.getMessage());
        }
    }

    private String relacionarAbogado(int idAbogado) {
        String nombreAbogado = ""; // Inicializar la variable localmente
        String sql = "SELECT nombre FROM tb_abogados WHERE id_abogado = ?";

        try (Connection cn = Conexion.conectar(); PreparedStatement pst = cn.prepareStatement(sql)) {

            // Asignar el valor del parámetro
            pst.setInt(1, idAbogado);

            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    nombreAbogado = rs.getString("nombre");
                }
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener el nombre del abogado: " + e);
        }

        return nombreAbogado; // Devuelve el nombre del abogado, vacío si no se encuentra
    }

    private int obtenerIdAbogadoCombo(String nombreAbogado) {
        int idAbogado = -1;  // Valor por defecto para indicar que no se encontró

        // Normalizar y usar comparación insensible a mayúsculas/minúsculas
        String sql = "SELECT id_abogado FROM tb_abogados WHERE LOWER(nombre) = LOWER(?)";

        try (Connection cn = Conexion.conectar(); PreparedStatement pst = cn.prepareStatement(sql)) {
            // Verificar el nombre que estamos buscando
            System.out.println("Buscando abogado con nombre: " + nombreAbogado);

            // Normalizar y asignar el parámetro
            pst.setString(1, nombreAbogado.trim());

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                idAbogado = rs.getInt("id_abogado");  // Obtener el ID del abogado
            } else {
                System.out.println("No se encontró abogado con el nombre: " + nombreAbogado);
            }
        } catch (SQLException e) {
            System.out.println("Error al ejecutar la consulta para obtener ID del abogado: " + e.getMessage());
        }

        return idAbogado;
    }

    //METODO PARA LIMPIAR
    private void limpiar() {
        txt_tipo.setText("");
        txt_lugar.setText("");
        txt_rol.setText("");
        txt_tribunal.setText("");
        jDateChooser_fecha.setDate(null);  // Limpiar la fecha
        jComboBox_hora.setSelectedItem("Hora:");
        jComboBox_minutos.setSelectedItem("Min:");
        txt_estado.setText("");
        txt_observacion.setText("");
        jComboBox_abogado.setSelectedItem("Seleccione Abogado:");
    }

}
